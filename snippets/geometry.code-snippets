{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"Print to console": {
		"scope": "cpp",
		"prefix": "geometry",
		"body": [
			"struct P{",
			"	long long x,y;",
			"	void read(){",
			"		cin >> x >> y;",
			"	}",
			"	P operator -(const P &b) const{",
			"		return P{x-b.x,y-b.y};",
			"	}",
			"	void operator -=(const P &b){",
			"		x-=b.x;",
			"		y-=b.y;",
			"	}",
			"	long long operator *(const P &b) const{",
			"		return x*b.y-y*b.x; // origin",
			"	}",
			"	bool parallel(const P &a,const P &b ,const P &c,const P &d){",
			"		return ((a-b)*(c-d) == 0);",
			"	}",
			"	long long triangle(P &a,P &b,P &c){",
			"		return (a-b)*(a-c);",
			"	}",
			"};",
			"bool isContain(P &a,P &b,P &c){",
			"	// ab contains c",
			"	if(a.triangle(a,b,c)){",
			"		return false;",
			"	}",
			"	return min(a.x,b.x)<=c.x && max(a.x,b.x)>=c.x && min(a.y,b.y)<=c.y && max(a.y,b.y)>=c.y;",
			"}",
			"bool intersection(P a,P b,P c,P d){",
			"	for(ll i=0;i<2;i++){",
			"		ll tmp=(b-a)*(c-a);",
			"		ll tmp2=(b-a)*(d-a);",
			"		if((tmp>0 && tmp2>0)||(tmp<0 && tmp2<0)){",
			"			return false;",
			"		}",
			"		swap(a,c);",
			"		swap(b,d);",
			"	}",
			"	return true;",
			"}",
		],
		"description": "Log output to console"
	}
}