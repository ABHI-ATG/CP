{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"Print to console": {
		"scope": "cpp",
		"prefix": "trie",
		"body": [
			"const ll N=1000005;",
			"int d[N][26];",
			"int cnt[N][26];",
			"ll ptr=1;",
			"ll ans;",
			"void get(string &s){",
			"	ll p=0;",
			"	for(ll i=0;i<s.size();i++){",
			"		ans+=cnt[p][s[i]-'a']*2;",
			"		if(d[p][s[i]-'a']){",
			"			p=d[p][s[i]-'a']; ",
			"		}else break;",
			"	}",
			"}",
			"void put(string &s){",
			"	ll p=0;",
			"	for(ll i=0;i<s.size();i++){",
			"		if(!d[p][s[i]-'a'] && i+1<s.size()){",
			"				d[p][s[i]-'a']=ptr++;",
			"		} ",
			"		cnt[p][s[i]-'a']++;",
			"		p=d[p][s[i]-'a'];",
			"	}",
			"}",
		],
		"description": "Log output to console"
	}
}