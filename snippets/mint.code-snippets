{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"Print to console": {
		"scope": "cpp",
		"prefix": "mint",
		"body": [
			"#define ll long long",
			"#define mod 1000000007",
			"template<class T>",
			"T power(T a, ll b) {T res = 1;while(b){if(b&1)res*=a;a*=a;b/=2;}return res;}",
			"struct mint {",
			"	int val;",
			"	int limit(int val) const{if(val<0)val+=mod;if(val>=mod)val-=mod;return val;}",
			"	mint(int val = 0) : val((val % mod + mod) % mod) {}",
			"	mint(ll val) : val((val % mod + mod) % mod) {}",
			"	friend bool operator==(const mint& a, const mint& b) { return a.val == b.val; }",
			"	friend bool operator!=(const mint& a, const mint& b) { return !(a == b); }",
			"	friend bool operator<(const mint& a, const mint& b) { return a.val < b.val; }",
			"	friend bool operator>(const mint& a, const mint& b) { return a.val > b.val; }",
			"	mint operator-() const {return mint(limit(mod - val));}",
			"	mint& operator++() { return *this += 1; }",
			"	mint& operator--() { return *this -= 1; }",
			"	mint operator++(int) { mint tmp; tmp.val = val++; return tmp; }",
			"	mint operator--(int) { mint tmp; tmp.val = val--; return tmp; }",
			"	mint inv() const {assert(val != 0);return power(*this, mod - 2);}",
			"	mint &operator*=(const mint &rhs) {val = (ll)(val) * rhs.val % mod;return *this;}",
			"	mint &operator+=(const mint &rhs) {val = limit(val + rhs.val);return *this;}",
			"	mint &operator-=(const mint &rhs) {val = limit(val - rhs.val);return *this;}",
			"	mint &operator/=(const mint &rhs) {return *this *= rhs.inv();}",
			"	friend mint operator*(mint lhs, const mint &rhs) {return lhs *= rhs;}",
			"	friend mint operator+(mint lhs, const mint &rhs) {return lhs += rhs;}",
			"	friend mint operator-(mint lhs, const mint &rhs) {return lhs -= rhs;}",
			"	friend mint operator/(mint lhs, const mint &rhs) {return lhs /= rhs;}",
			"	friend ostream& operator<<(ostream& os, const mint& m) {os << m.val; return os;}",
			"	friend istream& operator>>(istream& is, mint& m) {ll x; is >> x;m.val = x;return is;}",
			"};",
		],
		"description": "Log output to console"
	}
}