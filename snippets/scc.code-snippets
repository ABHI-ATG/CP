{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"Print to console": {
		"scope": "cpp",
		"prefix": "scc",
		"body": [
		"#include<bits/stdc++.h>",
		"using namespace std;",
		"#define ll long long",
		"/* Abhi-Atg */",
		" ",
		"vector<ll> topo;",
		" ",
		"void dfs(vector<vector<ll>> &g, ll s, vector<ll> &vis){",
		"	if (vis[s]){",
		"		return;",
		"	}",
		"	vis[s] = 1;",
		"	for (auto it : g[s]){",
		"		dfs(g, it, vis);",
		"	}",
		"	topo.push_back(s);",
		"}",
		" ",
		"vector<ll> tmp;",
		"void dfs1(vector<vector<ll>> &g, ll s, vector<ll> &vis){",
		"	if (vis[s]){",
		"		return;",
		"	}",
		"	vis[s] = 1;",
		"	for (auto it : g[s]){",
		"		dfs1(g, it, vis);",
		"	}",
		"	tmp.push_back(s);",
		"}",
		"ll dfs2(vector<vector<ll>> &g, ll s, vector<ll> &vis,vector<ll> &arr){",
		"	if (vis[s]){",
		"		return arr[s];",
		"	}",
		"	vis[s] = 1;",
		"	ll val=0;",
		"	for (auto it : g[s]){",
		"		val=max(val,dfs2(g, it, vis,arr));",
		"	}",
		"	return arr[s]=val+arr[s];",
		"}",
		" ",
		"int main(){",
		" ",
		"	ll n,m;",
		"	cin>>n>>m;",
		"	vector<ll> arr(n+1);",
		"	for(ll i=0;i<n;i++)cin>>arr[i+1];",
		"	vector<vector<ll>> g(n+1);",
		"	vector<vector<ll>> gg(n+1);",
		"	for(ll i=0;i<m;i++){",
		"		ll a,b;cin>>a>>b;",
		"		g[a].push_back(b);",
		"		gg[b].push_back(a);",
		"	}",
		" ",
		"	vector<ll> vis(n+1,0);",
		"	for(ll i=1;i<=n;i++){",
		"		if(!vis[i])dfs(g,i,vis);",
		"	}",
		"	vis.assign(n+1,0);",
		"	vector<ll> comp(n+1);",
		"	for(int i=1;i<=n;i++)comp[i]=i;",
		"	vector<vector<ll>> adj(n+1);",
		"	reverse(topo.begin(),topo.end());",
		"	for(ll i=0;i<n;i++){",
		"		if(!vis[topo[i]]){",
		"			dfs1(gg,topo[i],vis);",
		"			ll val=0;",
		"			for(auto it:tmp)val+=arr[it];",
		"			for(auto it:tmp){",
		"				arr[it]=val;",
		"				comp[it]=tmp[0];",
		"			}",
		"			tmp.clear();",
		"		}",
		"	}",
		"	for(ll i=1;i<=n;i++){",
		"		for(auto it:g[i]){",
		"			if(comp[i]!=comp[it]){",
		"				adj[comp[i]].push_back(comp[it]);",
		"			}",
		"		}",
		"	}",
		" ",
		"	ll ans=0;",
		"	vis.assign(n+1,0);",
		"	for(ll i=1;i<=n;i++){",
		"		if(!vis[i]){",
		"			dfs2(adj,i,vis,arr);",
		"		}",
		"		ans=max(ans,arr[i]);",
		"	}",
		"	",
		"	cout<<ans<<endl;",
		" ",
		" ",
		"	return 0;",
		"}",
		],
		"description": "Log output to console"
	}
}