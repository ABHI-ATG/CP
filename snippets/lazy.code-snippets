{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"Print to console": {
		"scope": "cpp",
		"prefix": "lazy",
		"body": [
			"struct node{",
			"	ll val;",
			"};",
			"class stree{",
			"	vector<node> v;",
			"	vector<ll> t;",
			"   public:",
			"	stree(ll n){",
			"		v.resize(4 * n + 1);",
			"		t.resize(4 * n + 1);",
			"	}",
			"	node oper(node a,node b){",
			"		node c;",
			"		c.val=a.val+b.val;",
			"		return c;",
			"	}",
			"	void push(ll ind){",
			"		if(t[ind]){",
			"			v[ind*2+1].val+=t[ind];",
			"			v[ind*2+2].val+=t[ind];",
			"			t[ind*2+1]+=t[ind];",
			"			t[ind*2+2]+=t[ind];",
			"			t[ind]=0;",
			"		}",
			"	}",
			"	int getvalue(ll low, ll high, ll l, ll r, ll ind){",
			"		if ((l > high) || (r < low)){",
			"			return 0;",
			"		}",
			"		if ((l <= low) && (r >= high)){",
			"			return v[ind].val;",
			"		}",
			"		push(ind);",
			"		int a=getvalue(low,low+high>>1,l,r,ind*2+1);",
			"		int b=getvalue(1+(low+high>>1),high,l,r,ind*2+2);",
			"		v[ind]=oper(v[ind*2+1],v[ind*2+2]);",
			"		return a+b;",
			"	}",
			"	void update(ll low, ll high, ll i, ll val, ll ind){",
			"		if (low == high){",
			"			v[ind].val=val;",
			"			return;",
			"		}",
			"		ll mid = (low + high) / 2;",
			"		if (mid >= i)",
			"			update(low, mid, i, val, ind * 2 + 1);",
			"		else",
			"			update(mid + 1, high, i, val, ind * 2 + 2);",
			"		v[ind]=oper(v[ind*2+1],v[ind*2+2]);",
			"	}",
			"	void update(ll low, ll high, ll l,ll r, ll val, ll ind){",
			"		if ((l > high) || (r < low)){",
			"			return;",
			"		}",
			"		if ((l <= low) && (r >= high)){",
			"			v[ind].val+=val;",
			"			t[ind]+=val;",
			"			return;",
			"		}",
			"		push(ind);",
			"		update(low,low+high>>1,l,r,val,ind*2+1);",
			"		update(1+(low+high>>1),high,l,r,val,ind*2+2);",
			"		v[ind]=oper(v[ind*2+1],v[ind*2+2]);",
			"	}",
			"};",
		],
		"description": "Log output to console"
	}
}