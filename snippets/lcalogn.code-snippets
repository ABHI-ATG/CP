{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"Print to console": {
		"scope": "cpp",
		"prefix": "lcalogn",
		"body": [
			"const int N=100050;",
			"int ln=18;",
			"vector<vector<int>> node(N + 1, vector<int>(ln, 0));",
			"vector<int> level(N + 1), vis(N + 1, 0);",
			"void dfs(vector<vector<int>> &graph, int s, vector<int> &vis, int par){",
			"	if (vis[s])return;",
			"	vis[s] = 1;",
			"	level[s] = level[par] + 1;",
			"	node[s][0] = par;",
			"	for (int i = 1; i < ln; i++){",
			"		if (node[node[s][i - 1]][i - 1] != -1){",
			"			node[s][i] = node[node[s][i - 1]][i - 1];",
			"		}",
			"		else break;",
			"	}",
			"	for (auto it : graph[s]){",
			"		dfs(graph,it, vis, s);",
			"	}",
			"}",
			"int lca(int u, int v, vector<vector<int>> &node, vector<int> &level,int &ln){",
			"	if (level[u] < level[v])swap(u,v);",
			"	int dif = level[u] - level[v];",
			"	for (int i = 0; i < ln; i++){",
			"		if ((1LL << i) & dif)u = node[u][i];",
			"	}",
			"	if (u == v)return u;",
			"	int tmp = 0;",
			"	for (int i = ln - 1; i >= 0; i--){",
			"		if (node[u][i] != node[v][i]){",
			"			u=node[u][i];",
			"			v=node[v][i];",
			"		}",
			"	}",
			"	return node[u][0];",
			"}",

		],
		"description": "Log output to console"
	}
}